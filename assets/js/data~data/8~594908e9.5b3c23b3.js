(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{238:function(e){e.exports={data:{tag:{title:"DevOps",belongsTo:{edges:[{node:{title:"Docker pour les développeurs: Environment as Code",path:"/blog/docker-pour-les-developpeurs-environment-as-code",date:"2. August 2015",timeToRead:4,description:'Envie d\'exporter ses belles playlists en dehors de Whyd ? Introducing "WhydToGo".',coverImage:null,content:'<p>Docker, ce game changer qu\'un certain Solomon Hykes venait (bien trop) rapidement presenter en pleine PyCon UK 2013 (<a href="https://www.youtube.com/watch?v=wW9CAH9nSLs" target="_blank" rel="nofollow noopener noreferrer">souvenirs</a>) change radicalement la vie des (dev)ops. Mais pour un dev\' tout court, quelle utilité ?\nSpoiler Alert : Docker (et Docker-Compose) va permettre de déclarer de manière simple et portable un ensemble de services tiers liés à notre application. Chaque dev peut alors mettre en route en quelques instants un environnement de développement <em>iso</em> à celui du reste de son équipe. Ou du reste du monde. Portabilité bonjour.</p>\n<h2 id="compose-toi-toi-même"><a href="#compose-toi-toi-m%C3%AAme" aria-hidden="true"><span class="icon icon-link"></span></a>Compose toi toi-même</h2>\n<p><a href="https://docs.docker.com/compose/" target="_blank" rel="nofollow noopener noreferrer">Docker-Compose</a>, anciennement Fig créé par <a href="https://www.orchardup.com/" target="_blank" rel="nofollow noopener noreferrer">Orchard</a> (racheté par Docker Inc. depuis) est un outil qui permet de facilement déclarer dans un fichier YaML les différents services qui lient notre applications. On y décrit comment les conteneurs qui accueillent les services dont notre application a besoin sont liés entre eux et doivent se comporter (ports à exposer, volumes à monter, etc...) comme on le ferait en ligne de commande avec le client <code class="language-text">docker</code>. Exemple ici pour un wiki simpliste :</p>\n<pre class="language-yaml"><span class="token key atrule">Mediawiki</span><span class="token punctuation">:</span>\n  <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"nickstenning/mediawiki:latest"</span>\n  <span class="token key atrule">links</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token string">"MySQL:mysql"</span>\n  <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token string">"8088:80"</span>\n  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token string">"/var/mediawiki:/data"</span>\n<span class="token key atrule">MySQL</span><span class="token punctuation">:</span>\n  <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"centurylink/mysql:5.5"</span>\n  <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>\n  <span class="token key atrule">expose</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token string">"3306"</span>\n  <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=MediaWiki.123</pre>\n<p>NOTE: Note: Cet exemple est honteusement pompé sur <a href="https://lorry.io/" target="_blank" rel="nofollow noopener noreferrer">Lorry.io</a> (voir lien en fin d\'article). En plus des services dont dépend notre projet, on peut déclarer des services de monitoring, un stack ELK portable, des services de mocks, etc... Ultra-pratique.</p>\n<p>On sort le CLI docker-compose (<code class="language-text">pip install docker-compose</code>) et on commence à orchestrer tout ce petit monde :</p>\n<pre class="language-bash">docker-compose start ./docker-compose.yml</pre>\n<p>Le fichier est alors passé au démon Docker qui va se charger de récupérer ou build les images selon les cas et démarrer les conteneurs demandés avec un nom parlant. Voilà, votre environnement de dev est prêt!</p>\n<h2 id="ce-nest-que-du-texte"><a href="#ce-nest-que-du-texte" aria-hidden="true"><span class="icon icon-link"></span></a>Ce n\'est que du texte</h2>\n<p>...Et le texte, ça se versionne très simplement ! Comme ce bon vieux <code class="language-text">requirements.txt</code> bien connus des Pythonistes qui permet déjà de récupérer les dépendances d\'un projet, on applique le même traitement à notre environnement. En ajoutant le fichier <code class="language-text">docker-compose.yml</code> à un dépôt de versionning git par exemple, on permet à n\'importe qui de rapidement cloner le dépôt et monter un environnement de développement. Plus besoin d\'installer tout un tas de paquets sur sa machine ni de monter une VM dédiée.</p>\n<p>En bonus, on peut joindre au dépôt un <code class="language-text">Dockerfile</code> et ajouter notre projet dans le <code class="language-text">docker-compose.yml</code> pour qu\'une instance soit lancée en même temps que le reste de l\'environnement : <em>Docker-ception</em>.</p>\n<h2 id="docker-est-development-ready"><a href="#docker-est-development-ready" aria-hidden="true"><span class="icon icon-link"></span></a>Docker est "Development-Ready"</h2>\n<p>Cela change radicalement des worklows de développement où l\'on passait un temps fou à trouver une machine propice au développement d\'un projet en particulier, où l\'on installait en dur sur sa machine un moteur de base de données, un serveur web, etc...</p>\n<p>Même avec l\'avènement de solutions comme Vagrant, on avait toujours besoin d\'avoir un moteur de machines virtuelles (VirtualBox, VMWare, etc...). Docker nous facilite grandement la vie et gère toute la complexité de partager un environnement de dev de bout en bout.</p>\n<p>En production, la donne est légèrement différente (car les problématiques ne sont pas les mêmes). Mais les solutions compatibles avec ce workflow de développement existent ! Tous les grands <em>cloud providers</em> proposent déjà un service de <em>hosting</em> de conteneurs; et chacun applique sa propre sauce d\'orchestration des services. <a href="https://giantswarm.io/" target="_blank" rel="nofollow noopener noreferrer">GiantSwarm</a>, un <em>cloud provider</em> proposant une offre de PaaS pensée pour gérer des conteneurs possède son propre vocabulaire de description des services : c\'est un dernier fichier YAML à joindre à son code et "pouf" votre application est déployée en poussant votre code - "Heroku-style", mais on parle ici de <em>tous</em> les composants (ou micro-services) de votre application, même les services tiers comme la BDD, etc...).</p>\n<p>NOTE: Note: GiantSwarm est actuellement en phase d\'early access. J\'ai la chance de pouvoir tester leurs services et je vous assure que le mot déploiement revêt un sens nouveau depuis que je teste leur plate-forme. Allez y faire un tour.</p>\n<p>Enfin, <a href="http://rancher.com/rancher-feature-iii/" target="_blank" rel="nofollow noopener noreferrer">Rancher</a>, un moteur de PaaS à installer soi-même comme un grand à choisi d\'utiliser la grammaire de docker-compose (on peut donc lui donner à manger un <code class="language-text">docker-compose.yml</code> et il se charger de monter nos services !) et de l\'étendre avec un <code class="language-text">rancher-compose.yml</code> qui permet de définir des règles d\'auto-scale, de load-balancing et plus encore.</p>\n<p>L’approche de Rancher, pendant que j’y suis, est assez originale : votre outil d\'orchestration est lui aussi rangé dans un conteneur. Il est multi-environnement, possède une bel interface web et l’équipe à l’origine du projet propose également <em>RancherOS</em>, un OS ou quasiment <em>tout</em> est conteneurisé. Je pourrais vous en parler des heures, mais vous êtes déjà parti vous monter un cluster <em>CoreOS</em> pour tester tout ça, je le sais bien.</p>\n<p>Et vous ? Docker en environnement de dev ? de prod ?!</p>\n<h2 id="quelques-liens"><a href="#quelques-liens" aria-hidden="true"><span class="icon icon-link"></span></a>Quelques liens</h2>\n<ul>\n<li>Docker-Compose: <a href="https://docs.docker.com/compose/" target="_blank" rel="nofollow noopener noreferrer">https://docs.docker.com/compose/</a></li>\n<li>Giant-Swarm : <a href="https://giantswarm.io/" target="_blank" rel="nofollow noopener noreferrer">https://giantswarm.io/</a></li>\n<li>Rancher / Rancher OS : <a href="http://rancher.com/" target="_blank" rel="nofollow noopener noreferrer">http://rancher.com/</a></li>\n<li>Lorry.io : <a href="https://lorry.io/" target="_blank" rel="nofollow noopener noreferrer">https://lorry.io/</a></li>\n</ul>\n'}},{node:{title:"Utiliser Docker derriere un proxy sur CoreOS",path:"/blog/utiliser-docker-derriere-un-proxy-sur-core-os",date:"5. July 2015",timeToRead:1,description:"Petit tips du jour qui pourra sauver l'après midi de certains...",coverImage:{type:"image",mimeType:"image/png",src:"/assets/static/docker-logo.fab6069.b924367.png",size:{width:792,height:269},sizes:"(max-width: 792px) 100vw, 792px",srcset:["/assets/static/docker-logo.a67b0b2.b924367.png 480w","/assets/static/docker-logo.fab6069.b924367.png 792w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 792 269' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3)' width='792' height='269' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAWCAYAAABwvpo0AAAACXBIWXMAAAsSAAALEgHS3X78AAAHV0lEQVRYw%2b1Ye1BUVRg/9y6mhrmilVoZyENgUcBE2EWwAsRSFpC7aKBp5issNUUJJBVGSWOFhZVFQhHKR7TiI9SGxAgxrUx7OZWNac%2bZHhNOj5myUe7pd%2b7e1cO6GPVXlnfmx/nO%2b3ufbyHkxtf9T5%2bcTqLSZzjo1IdIlDRN0KdmKP3QFTZiSDL9PxSR5NJv%2bK8KajA6LKqHZRltSJJITOy9ggelJGHgLb1TCOmb6EluZmu%2b5dej1WOtc%2b/1/UFYd/175ufXDF%2b9%2bcLIhQV257jemK6Qo2c%2bSUJX12miJs9U%2bhEzF19nlletxlpjyDCi2X6cFBLi0UjITdMJ6aUoYFFhU3j9cRqeZznK%2bgIUYEhKIxGzl3U6K2bMmE7e5IbWwGME1/GrvVG6whfWA%2bJf7fnnyU49NF5lPjlwaM%2bg%2bcsbhuRZPtblFJ8Mf3rDCd1TJe0%2blp00ePGaNtUDhNjEiYogsPzgiFnZRWPvvKU384y7cyw9RmbMFZyeooSTClelGLjw6TSmrtcbJYHbI3QOVanTuXxr6BSW0l8r4UX2Z%2bcHDp5h/aHZaz/rX9FIA9bX03DbPupXVCsPKN5OfRcVtjn3hCxb76G4/LzczLADX9OROaWF/JlB85YL0RNSRM56Aqz6OFpfte/h8DxJBJMix7xGpZ1jscAUfg9yjcgp5LJXMYXpHf2rFOM%2b6bEEFxurbE64L6H/sAWr6iH8kcDc0p99IXzAStsl3zU1l4atqOjwRz8wx3yezcNDahInSFpHflgxO6jtd6qraPrGb26uzTvXWj4q/ZGwLu48DuYevBJ%2bEj8nuvXQJNNKzB1wtw6houHWiV0ldvfZHnE2NmG8GDJ9oYfT8kNyis8PKt5KAwuraOiGvfLQlTY6aNmz1A9tuMUuBxRspIPM25gnnHGeN85vULTuudaLvZp/psLB8/TWqhYaIT2cptYS8WDyMO48ifuegwe8AwUY0PcEdurZeJLUDIzkLLsO606ifQ%2bIxNwCtNVQ1hDQL6mK02NvK8Y/BLYAXmoe6wu6FmgGbudDp9Mz5RoX/lkrsoPzN%2b4JWLfjJ5/iejl43fYO3Yb9NMBsl33Mdhq4dpscUt5IA832Du%2bSXVBQzY9h%2bZUvDF%2b7wx5Yffi0dtv7dODKTW1351pXRZimhyu5IXlyBBg9DwaWAHpgX3TKZGpwKOAoUI/5UYrARtN3oD0hVDnoU%2bCTrXkU0EGBczD%2bMXAWeBLwBn7AXD5af7QtwFuqsEzZ%2b4EYoKdbL%2bCSiBg5KcOYEBMjDX666iPvvedo%2bMZDss7%2biRy053MabD9Nw6wHaGhlM2X9oF2f0VDrK6wvB%2b8%2bS3VN39PQvWfpkC3H6G1rtsrJwwNikUgT8TqMVa20CQxWcu7aA3cfA4qZAlx4qofQZrRvAsEuc7PHSlMpzpqpJm0bLF2rGjQM81/grieYtwBnrhkCziJHVUDvqJQp4%2bPi4sb5zck/qC2y09sKai72L22k/W3NsrZ0P%2b1bUEcHFNZRrbWJ9it7hQ4o2CKzfr%2by/bK2vOlin9X23wYutdLRqZnmaKPkHzkpMwP1QYLK6BbgWe65FREGR/QOi7e4vER14M0GJR0BfF0VEJuWyTxnvNqvNjg85V7I0A5I6ngK8Koa3hq3SZB/QvhPN23BHE1ZCyW1H/xBNh%2bnpOot%2bY7qFvm%2b7W2U1L1Hhc1vyqTmbZk8/65Mak9QUnG4g1ha/iAVb9A7FpkPdpHwYiB0O4SbCqG80X/RkQSlXsCnQAX6LK7Zy/ArMBhKqAJOgB4OGA3M3ZOkLLTtwFc4Lw37/HDeTyycMJeD8UT1vmTmQc7k6vr0Xv0GYxGspWEvQRYhPf3nF34YXnmAjqh4%2bUL8xj0dIRWN8uCqZlmz6ZjsUf2GrKlqk0VryyVScvAiKXmN3mRppt5ZhYfWE%2bLJzotMmaJhTxrL0s6MDIYzQJ9iyQrM7kN7l8oDYtt0RE1iTOBxqmFuBr0VSjuNfWeY1SGsCW0O5qIx3qyei3HT68D7wB7V6mOwtpqvEbr1pc2YpTAbHzUqYPWGynOtn5yh535sp%2bWnvukgtqOXiLWVoYOUvU5JWSvVWA7RfnmbLgQ%2bkl2El0PJsAgB5YwRmVnEtXBRGdLy1SBH97sSBpLIhUQf7FHrAQmVoLNOYHSn/V78fVwN0T3hgx9eqLSmeQscl3v5eD3xTEmppWHflw2Hj9Kle9uo19rd1LNgB9Uur/nl9iVlJwIezSkaHxPtdyW205S9OvUs/nL%2bbYZQfPFymXYULQ4B9Zyw6n6hi/df5CpIQe%2buyuzODzO2eFZegUJPmDGXLyS0oyaa7lmam/tA0rxFD4xInRo1KXKEj9PiyoK8zZr4%2b%2bMUOmzK7KvOZXUGV9oKXG1/mUHVau7KY4H/tela5vLr9F3NGaXu/xZ4bNUzCp2QMUOwNjRqrrV%2b4OJSDQQWKq9VbV3P/w8Ii5tAopPThWlL8sRl5nIxJrtIHDo9WxydNk2Inpj69zV847vx/Wu%2bPwEzkzweW9xhfwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},content:'<p>Petit tips du jour qui pourra sauver l\'après midi de certains...</p>\n<h2 id="the-place-beyond-the-proxy"><a href="#the-place-beyond-the-proxy" aria-hidden="true"><span class="icon icon-link"></span></a>The Place beyond the Proxy</h2>\n<p>Certains utilisateurs de Docker sont bien cachés derrière un proxy d\'entreprise ou autre méchanceté du genre. Docker permet d\'utiliser notamment les variables d\'environnement <code class="language-text">http_proxy</code> et <code class="language-text">https_proxy</code> (capacité directement hérité des librairies Go).</p>\n<p>Sous CoreOS, on peut aussi renseigner une bonne fois pour toutes les informations de connexion au proxy dans un fichier de configuration et... ne plus y penser. Joie!</p>\n<h2 id="lets-do-this-"><a href="#lets-do-this-" aria-hidden="true"><span class="icon icon-link"></span></a>Let\'s do this !</h2>\n<p>Commencons par créer ou éditer la configuration du <em>unit</em> Docker de systemd :</p>\n<p>\\$ sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</p>\n<p>On y rentre les variables d\'environnement qui nous intéressent</p>\n<pre class="language-text">[Service]\nEnvironment=&quot;HTTP_PROXY=http://[user]:[password]@[hostname]:[port]&quot; &quot;NO_PROXY=localhost,127.0.0.0/8,172.17.0.0/16,.sock&quot;</pre>\n<p>Le ".sock" vous évitera quelques maux de cranes (le client Docker sera ainsi capable de contacter le démon via le socket Unix).</p>\n<p>On demande à systemd de prendre en compte nos modificatrions sur l\'Unit Docker :</p>\n<pre class="language-text">$ sudo systemctl daemon-reload</pre>\n<p>On redémarre ensuite le service Docker :</p>\n<pre class="language-text">$ sudo systemctl restart docker</pre>\n<p>That\'s it, un petit test rapide : <code class="language-text">docker pull busybox</code> vous confirmera que Docker peut bien récupérer les images à travers votre proxy !</p>\n'}}]}}}}}}]);