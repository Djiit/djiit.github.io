{"data":{"post":{"title":"Documenting your Flask-powered API like a boss","date":"November 27, 2017","content":"<p>Flask is a very popular and powerful framework for building web applications. Over the last years, people used it to create REST APIs that work well with decoupled, modern front-end applications.</p>\n<p>One challenge that backend development teams often face, is how to make it easy for front-end developers, whether internal or with a distant community, to create API-compliant clients (web app, mobile app or even CLI tools…)</p>\n<p>In the wild, they are many good examples of well-documented APIs… Take the Twitter API : the docs are great, user-friendly and cover all the available endpoint with tips and examples. Any fresh CS student could write a small Python tool using it, just by following the documentation and its examples.</p>\n<p>At @Ooreka, we decided to follow the <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OpenAPI</a> (f.k.a. Swagger 2.0) specification to build a solid documentation for our Flask-powered micro-services APIs. Let’s dive in.</p>\n<h2 id=\"321-doc\"><a href=\"#321-doc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3…2…1… Doc!</h2>\n<p>The first step for generating your documentation is to obtain a standardized spec file describing your API.</p>\n<p>Thanks to the <a href=\"http://apispec.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">apispec</a> lib, you can automagically generate a specification file (commonly named swagger.json) from your Flask code. Some other libraries can do a lot of magic for you, but apispec is really simple to use and can sit next to your code without interfering with it. It supports <a href=\"http://apispec.readthedocs.io/en/latest/using_plugins.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Marshmallow and Flask</a>, allowing you to re-use your code to generate a proper documentation !</p>\n<p>Let’s write our generation script, e.g. app/scripts/openapi.py :</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #89DDFF\">from</span><span style=\"color: #FFFFFF\"> apispec </span><span style=\"color: #89DDFF\">import</span><span style=\"color: #FFFFFF\"> APISpec</span>\n\n<span style=\"color: #676E95\"># Create spec</span>\n<span style=\"color: #FFFFFF\">spec </span><span style=\"color: #C792EA\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #82AAFF\">APISpec</span><span style=\"color: #89DDFF\">(</span>\n<span style=\"color: #82AAFF\">    </span><span style=\"color: #FF5370\">title</span><span style=\"color: #C792EA\">=</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">My Awesome API</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span>\n<span style=\"color: #82AAFF\">    </span><span style=\"color: #FF5370\">version</span><span style=\"color: #C792EA\">=</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">1.0.42</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span>\n<span style=\"color: #82AAFF\">    </span><span style=\"color: #FF5370\">info</span><span style=\"color: #C792EA\">=</span><span style=\"color: #B2CCD6\">dict</span><span style=\"color: #89DDFF\">(</span>\n<span style=\"color: #82AAFF\">        </span><span style=\"color: #FF5370\">description</span><span style=\"color: #C792EA\">=</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">You know, for devs</span><span style=\"color: #89DDFF\">'</span>\n<span style=\"color: #82AAFF\">    </span><span style=\"color: #89DDFF\">),</span>\n<span style=\"color: #82AAFF\">    </span><span style=\"color: #FF5370\">plugins</span><span style=\"color: #C792EA\">=</span><span style=\"color: #89DDFF\">[</span>\n<span style=\"color: #82AAFF\">        </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">apispec.ext.flask</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #82AAFF\">,</span>\n<span style=\"color: #82AAFF\">        </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">apispec.ext.marshmallow</span><span style=\"color: #89DDFF\">'</span>\n<span style=\"color: #82AAFF\">    </span><span style=\"color: #89DDFF\">]</span>\n<span style=\"color: #89DDFF\">)</span>\n\n<span style=\"color: #676E95\"># Reference your schemas definitions</span>\n<span style=\"color: #89DDFF\">from</span><span style=\"color: #FFFFFF\"> app.schemas </span><span style=\"color: #89DDFF\">import</span><span style=\"color: #FFFFFF\"> FooSchema</span>\n\n<span style=\"color: #FFFFFF\">spec.</span><span style=\"color: #82AAFF\">definition</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">Foo</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #82AAFF\"> </span><span style=\"color: #FF5370\">schema</span><span style=\"color: #C792EA\">=</span><span style=\"color: #82AAFF\">FooSchema</span><span style=\"color: #89DDFF\">)</span>\n<span style=\"color: #676E95\"># ...</span>\n\n<span style=\"color: #676E95\"># Now, reference your routes.</span>\n<span style=\"color: #89DDFF\">from</span><span style=\"color: #FFFFFF\"> app.views </span><span style=\"color: #89DDFF\">import</span><span style=\"color: #FFFFFF\"> my_route</span>\n\n<span style=\"color: #676E95\"># We need a working context for apispec introspection.</span>\n<span style=\"color: #FFFFFF\">app </span><span style=\"color: #C792EA\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #82AAFF\">create_app</span><span style=\"color: #89DDFF\">()</span>\n\n<span style=\"color: #89DDFF\">with</span><span style=\"color: #FFFFFF\"> app.</span><span style=\"color: #82AAFF\">test_request_context</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #FFFFFF\">:</span>\n<span style=\"color: #FFFFFF\">    spec.</span><span style=\"color: #82AAFF\">add_path</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FF5370\">view</span><span style=\"color: #C792EA\">=</span><span style=\"color: #82AAFF\">my_route</span><span style=\"color: #89DDFF\">)</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #676E95\"># ...</span>\n\n<span style=\"color: #676E95\"># We're good to go! Save this to a file for now.</span>\n<span style=\"color: #89DDFF\">with</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #82AAFF\">open</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">swagger.json</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #82AAFF\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">w</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #89DDFF\">as</span><span style=\"color: #FFFFFF\"> f:</span>\n<span style=\"color: #FFFFFF\">    json.</span><span style=\"color: #82AAFF\">dump</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #82AAFF\">spec.to_dict</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #82AAFF\"> f</span><span style=\"color: #89DDFF\">)</span></code></pre>\n<p>Here, we first create a new APISpec instance with some details about our API. Then, we add our definitions (here, we are using Marshmallow to define how our API will serialize/deserialize data) with APISpec.definition(). Finally, we add our routes to our API specification using APISpec.add_path(). apispec will parse your route functions docstrings, so make sure you add some OpenAPI YaML stuff here, as in :</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #82AAFF\">@app.route</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">/foo/&lt;bar_id&gt;</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">)</span>\n<span style=\"color: #C792EA\">def</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #82AAFF\">my_route</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FF5370\">gist_id</span><span style=\"color: #89DDFF\">):</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #89DDFF\">\"\"\"</span><span style=\"color: #676E95\"> Cool Foo-Bar route.</span>\n<span style=\"color: #676E95\">    ---</span>\n<span style=\"color: #676E95\">    get:</span>\n<span style=\"color: #676E95\">        summary: Foo-Bar endpoint.</span>\n<span style=\"color: #676E95\">        description: Get a single foo with the bar ID.</span>\n<span style=\"color: #676E95\">        parameters:</span>\n<span style=\"color: #676E95\">            - name: bar_id</span>\n<span style=\"color: #676E95\">              in: path</span>\n<span style=\"color: #676E95\">              description: Bar ID</span>\n<span style=\"color: #676E95\">              type: integer</span>\n<span style=\"color: #676E95\">              required: true</span>\n<span style=\"color: #676E95\">        responses:</span>\n<span style=\"color: #676E95\">            200:</span>\n<span style=\"color: #676E95\">                description: Foo object to be returned.</span>\n<span style=\"color: #676E95\">                schema: FooSchema</span>\n<span style=\"color: #676E95\">            404:</span>\n<span style=\"color: #676E95\">                description: Foo not found.</span>\n<span style=\"color: #676E95\">    </span><span style=\"color: #89DDFF\">\"\"\"</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #676E95\"># (...)</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #82AAFF\">jsonify</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #82AAFF\">foo</span><span style=\"color: #89DDFF\">)</span></code></pre>\n<p>You will end up with a valid JSON API specification. Now, let’s see how to bootstrap an HTML version and show it to the world!</p>\n<h2 id=\"browserify-ing-all-this\"><a href=\"#browserify-ing-all-this\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Browserify-ing all this</h2>\n<p>A really cool tool to do that is the <a href=\"https://github.com/Rebilly/ReDoc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReDoc</a> Javascript library from the guys at <a href=\"https://apis.guru/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">APIs.guru</a>. We’ll use it to present the generated JSON specification in a convenient way.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3292/1*bXib0QoiJR02O7MXBxgH9g.png\" alt=\"Example of a HTML documentation with ReDoc.\"><em>Example of a HTML documentation with ReDoc.</em></p>\n<p>ReDoc is basically a single, minified JS file you can include in a bare index.html file and tell it where your swagger.json is located. It uses a really neat 3 columns design : a navigation sidebar, a wide center section with your API endpoints definitions and a third column dedicated to requests or responses samples and examples.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #89DDFF\">&lt;!</span><span style=\"color: #F07178\">DOCTYPE html</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">html</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">head</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">title</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #FFFFFF\">Cool API Documentation</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">title</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">meta</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #FFCB6B\">charset</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">utf-8</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">/&gt;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">meta</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #FFCB6B\">name</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">viewport</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #FFCB6B\">content</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">width=device-width, initial-scale=1</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">style</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #F07178\">body</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #B2CCD6\">margin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #B2CCD6\">padding</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">style</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">head</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">body</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">redoc</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #FFCB6B\">spec-url</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">./swagger.json</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #FFCB6B\">hide-loading</span><span style=\"color: #89DDFF\">&gt;&lt;/</span><span style=\"color: #F07178\">redoc</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">script</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFCB6B\">src</span><span style=\"color: #FFFFFF\">=</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">https://rebilly.github.io/ReDoc/releases/latest/redoc.min.js</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">script</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">body</span><span style=\"color: #89DDFF\">&gt;</span>\n<span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">html</span><span style=\"color: #89DDFF\">&gt;</span></code></pre>\n<p>Yep, that was quick. Start a HTTP server (e.g. with python3 -m http.server) and go have a look at your cool, new documentation. All you have to do now is to host your HTML and JSON file on a server and you’re good.</p>\n<p>You can check out a more complete, real-world example <a href=\"https://rebilly.github.io/RebillyAPI/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<h2 id=\"wrapping-it-up\"><a href=\"#wrapping-it-up\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrapping it up</h2>\n<p>The OpenAPI offers many options I didn’t cover here for brevity and simplification. You can add your server’s real endpoints to the doc, add many details about the parameters and responses of your routes, provide examples in your routes functions doc-strings that will be parsed and added to your spec, etc…</p>\n<p>As a final tip, head to the <a href=\"http://flask.pocoo.org/docs/0.12/cli/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flask CLI</a> documentation to see how easily you can hook your generation script into the command line interface of Flask (this will give you some bad-ass command like FLASK_APP=main.py flask generate_doc). Oh, and make sure you put this into your Continuous Integration routine to keep your API documentation up-to-date with your API!</p>\n<p>Cheers!</p>\n","tags":[{"title":"Python","path":"/blog/tag/Python"},{"title":"Flask","path":"/blog/tag/Flask"},{"title":"OpenAPI","path":"/blog/tag/OpenAPI"},{"title":"Swagger","path":"/blog/tag/Swagger"},{"title":"Documentation","path":"/blog/tag/Documentation"}]}},"context":{}}