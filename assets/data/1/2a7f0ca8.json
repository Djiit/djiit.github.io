{"data":{"post":{"title":"Compiler ses applications Android avec Cordova en mode headless","date":"July 16, 2015","content":"<p>On trouve ça et là des tutoriaux pour installer le SDK Android et compiler ses applications avec Cordova.</p>\n<p>La plupart se contentent d’enchaîner les captures d'écrans en mode cliquodrome... Lorsqu'il s'agit d'équiper une machine sans interface graphique, idéalement pour en faire une machine de build, c'est tout de suite plus obscur. Vous êtes derrière un proxy ? Accrochez-vous.\nRetour d'expérience sur l'installation du SDK Android sur une Debian 64bits fraîchement installée.</p>\n<h2 id=\"rapatrier-les-dépendances\"><a href=\"#rapatrier-les-d%C3%A9pendances\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rapatrier les dépendances</h2>\n<p>Installer <code>wget</code> (si besoin), <code>java7</code> et <code>zipalign</code> qui nous servira à signer nos APK.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #FFFFFF\">apt-get install wget zipalign openjdk-7-jdk ant</span></code></pre>\n<p>Sur une distribution 64bits récente, il vous faudra installer les dépendances suivantes :</p>\n<p>Pour Ubuntu :</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #FFFFFF\">apt-get install libc6-i386 libglib2.0-0:i386 libsm6:i386 libglu1-mesa:i386 libgl1-mesa-glx:i386 libxext6:i386 libxrender1:i386 libx11-6:i386 libfontconfig1:i386 lsb-core</span></code></pre>\n<p>Pour Debian (testé sur Wheezy) :</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #FFFFFF\">dpkg --add-architecture i386</span>\n<span style=\"color: #FFFFFF\">apt-get update</span>\n<span style=\"color: #FFFFFF\">apt-get install libncurses5:i386 libstdc++6:i386 zlib1g:i386</span></code></pre>\n<h2 id=\"android-sdk-tool\"><a href=\"#android-sdk-tool\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Android SDK Tool</h2>\n<p>Sortez un terminal et récupérez la dernière version du SDK Tool (voir <a href=\"https://developer.android.com/sdk/index.html#Other\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.android.com/sdk/index.html#Other</a>) :</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #82AAFF\">cd</span><span style=\"color: #FFFFFF\"> /tmp</span>\n<span style=\"color: #FFFFFF\">wget http://dl.google.com/android/android-sdk_r24.3.3-linux.tgz</span>\n<span style=\"color: #FFFFFF\">tar -xzf android-sdk_r24.3.3-linux.tgz</span>\n<span style=\"color: #FFFFFF\">rm android-sdk_r24.3.3-linux.tgz</span>\n<span style=\"color: #FFFFFF\">mv android-sdk-linux /opt/</span></code></pre>\n<p>On a au passage extrait tout le dossier dans <code>/opt</code> histoire d'y accéder facilement plus tard.</p>\n<p>(Optionnel) Indiquer un proxy HTTP dans le fichier <code>~/.android/androidtool.cfg</code> (pensez à remplacer les variables par de vraies valeurs) :</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #82AAFF\">echo</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">sdkman.force.http=true</span>\n<span style=\"color: #C3E88D\">http.proxyHost=&lt;proxy_host&gt;</span>\n<span style=\"color: #C3E88D\">http.proxyPort=&lt;proxy_port&gt;</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #C792EA\">&gt;</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #C792EA\">~</span><span style=\"color: #FFFFFF\">/.android/androidtool.cfg</span></code></pre>\n<p>Une fois android-sdk-tools installé, rendez-le accessible dans votre PATH:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #C792EA\">export</span><span style=\"color: #FFFFFF\"> ANDROID_HOME=/opt/android-sdk-linux</span>\n<span style=\"color: #C792EA\">export</span><span style=\"color: #FFFFFF\"> PATH=</span><span style=\"color: #89DDFF\">${</span><span style=\"color: #A6ACCD\">PATH</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #FFFFFF\">:</span><span style=\"color: #89DDFF\">$</span><span style=\"color: #A6ACCD\">ANDROID_HOME</span><span style=\"color: #FFFFFF\">/tools:</span><span style=\"color: #89DDFF\">$</span><span style=\"color: #A6ACCD\">ANDROID_HOME</span><span style=\"color: #FFFFFF\">/platform-tools</span></code></pre>\n<p>On récupère les dernières versions du SDK :</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #FFFFFF\">android update sdk --no-ui</span></code></pre>\n<p>(Optionnel) Installer une version des build-tools particulière :</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #FFFFFF\">android update sdk --all --filter </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">build-tools-22.0.1</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #FFFFFF\"> --no-ui</span></code></pre>\n<p>That's it ! La machine est prête à enchaîner les builds. Essayez donc de créer un projet :</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #FFFFFF\">android create project \\</span>\n<span style=\"color: #FFFFFF\">--target 1 \\</span>\n<span style=\"color: #FFFFFF\">--name MyAndroidApp \\</span>\n<span style=\"color: #FFFFFF\">--path ./MyAndroidAppProject \\</span>\n<span style=\"color: #FFFFFF\">--activity MyAndroidAppActivity \\</span>\n<span style=\"color: #FFFFFF\">--package com.example.myandroidapp</span></code></pre>\n<p>On peut facilement ranger tout ça dans un script d'installation à soumettre à SaltSack ou Puppet. Reste à déclarer la machine, par exemple, en tant que slave Jenkins dédié à des jobs de compilation Android.</p>\n<h2 id=\"cordova\"><a href=\"#cordova\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cordova</h2>\n<p>Assurez-vous d'avoir la dernière version de NodeJS / NPM avant de passer à l'installation de Cordova (<a href=\"https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories</a>). C'est parti :</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #FFFFFF\">npm install -g cordova</span></code></pre>\n<p>Note : Cordova utilise Gradle pour build les projets; le coup du proxy peut-être assez casse-tête.</p>\n<p>(Optionnel) Indiquer un proxy HTTP et HTTPS dans le fichier <code>~/.gradle/gradle.properties</code> (pensez à remplacer les variables par de vraies valeurs) :</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">echo &quot; systemProp.http.proxyHost=&lt;proxy_host&gt;\nsystemProp.http.proxyPort=&lt;proxy_port&gt;\nsystemProp.http.proxyUser=&lt;proxy_user&gt;\nsystemProp.http.proxyPassword=&lt;proxy_password&gt;\nsystemProp.https.proxyHost=&lt;proxy_host&gt;\nsystemProp.https.proxyPort=&lt;proxy_port&gt;\nsystemProp.https.proxyUser=&lt;proxy_user&gt;\nsystemProp.https.proxyPassword=&lt;proxy_password&gt; &quot; &gt; ~/.gradle/gradle.properties</code>\n<p>Placez-vous dans votre dossier de projet Cordova (ou créez-en un avec <code>cordova create MonProjet</code>). Le petit bout de code suivant assure le build complet d'un APK signé. Il utilise 3 variables d'environnement pour récupérer l'emplacement de votre keystore (<code>ANDROID_KEYSTORE</code>), le mot de passe associé (<code>ANDROID_STORE_PASS</code>) et la keypass spécifique à votre application (<code>ANDROID_KEY_PASS</code>). L’avantage direct de ces variables est de ne pas avoir à stocker dans le projet (et donc souvent dans un dépôt de versionning) des informations sensibles comme les passwords ou encore le fichier <code>.keystore</code>. En plus, rien de plus facile pour Jenkins ou un autre outil d'intégration continue de passer ces variables avant le lancement d'un job de compilation.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span style=\"color: #FFFFFF\">cordova platforms add android</span>\n<span style=\"color: #FFFFFF\">cordova build android --release</span>\n<span style=\"color: #FFFFFF\">jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore </span><span style=\"color: #89DDFF\">$(</span><span style=\"color: #C3E88D\">ANDROID_KEYSTORE</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #FFFFFF\"> -storepass </span><span style=\"color: #89DDFF\">$(</span><span style=\"color: #C3E88D\">ANDROID_STORE_PASS</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #FFFFFF\"> platforms/android/build/outputs/apk/android-release-unsigned.apk BatStat -keypass </span><span style=\"color: #89DDFF\">$(</span><span style=\"color: #C3E88D\">ANDROID_KEY_PASS</span><span style=\"color: #89DDFF\">)</span>\n<span style=\"color: #FFFFFF\">zipalign -f -v 4 platforms/android/build/outputs/apk/android-release-unsigned.apk platforms/android/build/outputs/apk/android-release-signed.apk</span></code></pre>\n<p>Vous pouvez à loisir mettre ça dans une target <code>android</code> d'un fichier <code>Makefile</code> et lancer un joli <code>make android</code> pour compiler vos applis ! Joie !</p>\n<p>N'hésitez pas à laisser vos commentaires juste là-dessous.</p>\n<h2 id=\"quelques-liens\"><a href=\"#quelques-liens\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quelques liens</h2>\n<ul>\n<li><a href=\"https://developer.android.com/sdk/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.android.com/sdk/index.html</a></li>\n<li><a href=\"https://developer.android.com/tools/projects/projects-cmdline.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.android.com/tools/projects/projects-cmdline.html</a></li>\n<li><a href=\"http://doc.ubuntu-fr.org/android_sdk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://doc.ubuntu-fr.org/android_sdk</a></li>\n<li><a href=\"https://cordova.apache.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cordova.apache.org/</a></li>\n</ul>\n","tags":[{"title":"Intégration Continue","path":"/blog/tag/Int%C3%A9gration%20Continue"},{"title":"Android","path":"/blog/tag/Android"},{"title":"SDK","path":"/blog/tag/SDK"},{"title":"Cordova","path":"/blog/tag/Cordova"},{"title":"Jenkins","path":"/blog/tag/Jenkins"},{"title":"headless","path":"/blog/tag/headless"}]}},"context":{}}